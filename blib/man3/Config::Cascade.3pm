.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Config::Cascade 3"
.TH Config::Cascade 3 "2005-04-08" "perl v5.8.3" "User Contributed Perl Documentation"
.SH "NAME"
Config::Cascade
.SH "VERSION"
.IX Header "VERSION"
Version 0.01
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Config::Cascade is intended to allow the use of global configurations in combination with more specific
configs, with the added benefit of overriding all of these settings from the command line. This benefit 
allows the use of a standard base config, with a simple format, while allowing custom configs for multiple
programs utilizing the same resources or configurations. Validated configuration options will function in both global 
and specific configuration files, and may also be referenced from the command line using Getopt::Long and getopt style
notation:
 \-\-<option>=<value> or \-<alias>=<value>
.PP
Example:
.PP
.Vb 11
\&    use Config::Cascade;
\&    my %config = Config::Cascade->new(  
\&                                        configDir => '/etc/Frood', 
\&                                        globalConfig => 'global.cfg', 
\&                                        configFile => 'example.cfg',
\&                                        validate => (
\&                                                host => (type => 'fqdn'),
\&                                                port => (type => 'regexp', args=> 'RE::num::int'),
\&                                                url => (type => 'regexp', args => '^http:'),
\&                                                ),
\&                                     );
.Ve
.PP
.Vb 1
\&    print $config{host};
.Ve
.SH "Validation File format"
.IX Header "Validation File format"
A validation file follows a simple format, one entry per line:
.PP
<Config variable name> <data type> <optional arguments>
.PP
Config variable names are arbitrary, but must be single strings, sans white space. The following is a list of valid data types.
.PP
alias  \- Declares this entry to be an alias for another. Alias requires an optional argument referring to the parent option.
.PP
bool   \- Sets the value to '1' if present.
.PP
int    \- Matches the equiv of \f(CW$RE\fR{num}{int}
.PP
fqdn   \- Matches fully qualified domain names for formatting, using \f(CW$RE\fR{net}{domain}
.PP
regexp \- Matches a free form regular expression, or refers to an entry in Regexp::Common. This requires an optional argument of a vlaid regular expression, or \s-1RE\s0 reference. Specifying '\s-1RE::\s0' informs the parser a Regexp::Common regexp is being invoked, with subsequent delimited entries corresponding to Regexp::Common's multi-level hash syntax. Otherwise, the contents of args will be precompiled as-is and matched accordingly.
.PP
string \- Matches the equiv of /\ew+/
.SH "Config File format"
.IX Header "Config File format"
A configuration file follows a simple format, one entry per line:
<Config variable name> <value>
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.Sh "new"
.IX Subsection "new"
.Vb 4
\&        Performs start-up sanity checks and functions. The module will at first attempt to load a 
\&global configuration file, if available. After that, a more specific configuration file (if available),
\&is loaded, overriding any settings in the global configuration that collide. After that, command line
\&options then override any loaded settings that collide.
.Ve
.PP
.Vb 14
\&        Valid options:
\&                configDir - Specifies a directory containing configuration files.
\&                        - If not specified, will use the current working directory.
\&                configFile - Specifies a specific configuration file to be read.
\&                        - If not specifed, will be ignored.
\&                debug - enables debug output.
\&                globalConfig - Specifies a global config shared between multiple programs.
\&                        - If not specified, global.cfg will be looked for in the specified configDir.
\&                noCommandLine - Skips parsing of @ARGV.
\&                noConfig - Skips reading of configuration files. Command line options will be used.
\&                noValidation - Skips use of validation functions entirely. 
\&                validate - Optional hash structure containing validation instructions.
\&                validationFile - Specifies a file containing configuration validation instructions.
\&                        - If not specified, global.validation will be looked for in the specified configDir.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Bill Nash, \f(CW\*(C`<billn@billn.net>\*(C'\fR
.SH "ACKNOWLEDGEMENTS Thanks go to bline, dngor, the letter P, and the number 2."
.IX Header "ACKNOWLEDGEMENTS Thanks go to bline, dngor, the letter P, and the number 2."
.SH "COPYRIGHT & LICENSE"
.IX Header "COPYRIGHT & LICENSE"
Copyright 2005 Bill Nash, All Rights Reserved.
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.
